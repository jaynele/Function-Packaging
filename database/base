表结构,表间关联关系,nosql :mongo memcache redis,存储并高效访问,减少数据冗余,避免数据维护异常,节约存储空间,高效的访问
需求分析->逻辑设计->物理设计->维护优化
需求分析:属性,数据
逻辑设计:er图对数据库进行逻辑建模
物理设计:把逻辑设计转为物理设计
维护优化:新的需求建表,索引优化,大表拆分


github   slack   tower远程协作开发
需求分析:不能直接进行表结构的设计,分析要存储的数据,数据的存储特点,数据的生命周期,
1.实体与实体之间的关系,1:1,1:多,多:多,一个实体一个表,或多个实体一个表
2.实体的属性

案例一:小型电子商务网站,几个模块:用户模块,商品模块,订单模块,购物车模块,供应商模块
实体:用户模块:属性用户名,密码,电话,邮箱,身份证,地址,姓名,昵称,唯一表示属性身份证,电话:存储特点永久存储
实体商品模块:属性 商品编码,商品名称,商品描述,商品品类,供应商名称,重量,有效期,价格:,唯一(商品名称,供应商名称),商品编码:对于下线商品可以归档存储
实体订单模块:属性 订单号,用户姓名,用户电话,收货地址,商品编号,商品名称,数量,价格,订单状态,支付状态,订单类型...唯一属性,订单号,存储,分表分库存储
实体购物车模块:属性用户名,商品编号,商品名称,商品价格,商品描述,商品分类,加入时间,商品数量....唯一属性:购物车编号,(用户名,商品编号,加入时间),不永久存储,设置归档,清理规则
实体供应商模块:属性供应商编号,供应商名称,联系人,电话,营业执照号,地址,法人.....唯一属性:供应商编号,或营业执照编号,永久存储
实体关系分析:


逻辑设计
ER图展示出逻辑模型
ER:一个表就是一个   关系,
   一行就是一个  元组,
   一列就是一个  属性,
   唯一确定一个元组的是 候选码,
   一个关系有多个候选码,选其中一个为 主码,
   属性的取值范围为 域,
   元组中的一个属性值是  分量,
   
   矩形是ER的实体集
   菱形是关系集
   椭圆表示实体的属性
   线段将属性连接到实体集,将实体集联系到联系集
   
   
   逻辑设计的规范  第一,第二,第三范式
   数据操作异常,插入异常:如果某个实体是随着另外一个实体的存在而存在则缺少某个实体时就无法表示这个实体,这个表就会存在插入异常
                更新异常,更改表某个实例的单独属性时,将多行更新,说明存在更新异常
                删除异常,删一行,却多删.
   数据冗余:相同的数据在多个地方存在,或某个列可以由其他列计算得到
   
   第一范式:数据库中的表都是二维表
   第二范式:不存在插入异常等数据操作异常;关键字
