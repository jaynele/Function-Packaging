1、 PHP是通过类和方法等语言结构支持面向对象编程
    对象相关的函数和内置类为面向对象 编程提供支持
    组织、测试、操作类和对象的工具和技术
    包、命名空间、包含路径、类函数和对象函数、反射API
2、包是 一组相关类的集合，以某种方式组合在一起
   包可以把系统的一部分和其他部分分隔开
   把类按作包来处理的 方式，
3、命名模式和命名空间
   一个类在全系统中可用，有重名的问题，文件调用，类中的方法可能会重名
   命名空间就是一个容器，可以将类，函数，变量放里面，
   在命名空间中，无条件使用，在命名空间外，必须导入或引用命名空间，才能访问它所包含的项
   namespace my;
   require_once 'userful/result.php';
   class Use{
   }
   namespace Userful;
   class Use{
   }
   namespace关键字 是来创建命名空间的，php支持创建嵌套的命名空间，对于嵌套空间，只用\反斜线分隔开就好了，如下：
    namespace com\getinstance\util;
    class Debug{
      static function helloword(){
        echo 'hello from bug';
      }
    }
   也可以使用域名作为命名空间，如baidu.com
   如果是从 命名空间内部调用方法，那么直接调用就好，Debug::helloword();因为我已经在命名空间内部了
   如果从命名空间外部访问类的方法我们可以：com\getinstance\util\Debug::helloword();
   namespace main;
   com\getinstance\util\Debug::helloword();
   这种会报错；命名空间最前面加反斜线是从根目录开始导入命名空间， 这个为绝对空间，在空间中引用可以这样使用。 
   但为了方便， 减少代码量，不用每次引用时候都写那么长的命名空间，使用use关键词，后面跟上 导入的命名空间的类 ，如果本类中已存在，
   用as关键字，另外起名字，空间中调用的时候，使用这个另外起的名字就可以了。一个文件中也可以 有多个命名空间，最后用{}.
   输出当前的命名空间__NAMESPACE__，   通常一个文件，一个 命名空间就可以了。
4、使用文件系统模拟包
    require();require_once();include();include_once();
    上面每个都是语句，而并不是函数，所以我们可以不用（），但是最好 带上；
    在文件没有包含的情况下，__once()才能用。这样可以防止类和方法重复定义。
    require(),require_once()要比include(),include_once()好，引入文件有误，直接停止所有程序，而后面的则是中断引入文件， 照常进行
    require(),运行更快。require_once()执行较慢。
    include(),__once()适合模板的加载。
5、PEAR（php扩展和应用程序库）是php官方维护的软件包集合，也是增强php功能的工具,PEAR用文件系统来定义包，每个类文件使用文件路径来命名，文件路径
   用下划线分隔开
6、路径
   组织组件时候，要确定文件和目录存放的位置，考虑组件之间的访问机制，包含一个文件时候，使用相对路径，相对于当前目录的文件路径
    使用相对路径，就把脚本目录和类库目录的关系定好了。
    可以在任何地方使用，就把包放到include_path()的指定目录中。 先在include()中寻找，然后是 include_path()中寻找，如果还没有，则是include()
    中返回的结果为最终的结果，include_path是配置文件php.ini 文件中的
    在使用文件系统函数时候， 如果没有 找 到文件， 就会到include_path()中找，
    如果没有修改php.ini文件的权限，就用set_include_path()函数来设置，为了不覆盖已经有的值，可以先get_include_path()原来的值再进行追加
    set_include_path(get_include_path().'路径');
7、一个文件一个类，一一对应，方便管理，但包含文件会有开销，每个类文件的文件名跟包含的类名有关系
   __autoload()拦截器， 自动包含类文件，当实例化一个未知类时，会调用这个方法，这个方法只有一个参数，会把当前类名作为参数传进去
   这个拦截器，自己定义一种策略，来定义和包含缺失的类文件
   public function __autoload($className){
      require_once("$className.php");
   }
   $objLoad = new Product('name','title');
   实例化一个 未定义的类，自动调用__autoload()方法，如果Product这个类不存在，那么‘product’这个字符串就会替代$className,作为参数传进去
   __autoload()是个强大的工具，但是一个进程只能调用一次
8、类函数和对象函数
   php提供一系列函数来检测类和对象，例如：程序运行时检测当前使用的类 
   实际开发时，我们需要将类名字符串赋值给变量。然后 通过这个变量来加载类文件，和实例化这个类的对象
   检查类，方法是否存在，避免危险，现在，类函数被更强大的反射API所替代
   但类函数简单易用一般成为首选
   file_exists();method_exists();file_exists();
   php手册 中输入：函数和方法列表，所有的方法和函数都将列出。
   class_exists();检测类是否存在；
   我们在使用类之前，先确定类是否存在  ，使用class_exists();
   对于外部的数据，我们要小心，都要检测和处理，路径和目录上，防止用户改变目录， 包含不需要的文件
   用get_declared_classes();
   var_dump(get_declared_classes());返回 已定义的 包含所有类名的数组；列出开发者定义的类和php内置的类，只返回函数调用时定义的类，可以通过
   require();等加载进更多的类， 使数目更多
9、 了解对象和类
   使用类的类型提示来限制传入的 对象参数
   但不允许限制从方法或函数返回的对象类型，考虑到将来的扩展
   检测对象基本类型的工具，检查对象的类get_class();接收任何对象作为参数，以字符串形式返回该对象的类名
    instanceof; 是有两个参数的操作符，左边是要检测的对象，右边是实例化时的类名，返回布尔值
    了解类中的方法
    get_class_methods();返回一个类中所有的方法列表，该方法以类名作为参数，返回包含一个类中所有方法的数组
    如果传递一个对象给这个函数，也可以获取类中的所有方法，不过是只有声明为public的方法才会在这个数组中
    这个数组返回的方法名都是以字符串形式存在的。
    在类中调用时，我们用字符串形式来调用方法，其实这个不安全的。$obj->$method();$method为方法名需要检测方法是否存在
    if(in_array($method,get_class_methods())){
      $obj->$method();
    }
    is_callable();method_exists()两个都可以检查函数是否存在，is_callable();更高级一些，传入类的方法名
    如果检测类中的方法是否可以调用时，我们可以以一个数组 作为参数,数组元素可以（ 对象，方法名）或者（类名，方法名）
    if(is_callable(array($obj,$method))){
      return $obj->$method;
    }
    如果is_callable()；传入第二个参数布尔值，如true，则 只会检测方法或函数的语法是否正确，并不会检查方法是否存在
    method_exists($obj,$method);两个参数，判断对象中的方法是否存在， 返回true时候，并不能说明可以调用，还有private,protected
    查询类的属性，get_class_vars();接收一个类名，返回一个关联数组，属性名作为键名，属性值作为键值，不过只有public的属性才会取到这个数组中
    get_parent_class();参数是类名或一个对象，返回类的父类名称或false，
    is_subclass_of();传入两个参数，第一个参数是子类的类名，第二个参数是父类的类名，判断 是否是继承关系，返回布尔值，只会告诉类的继承关系，并
    不会 告知是否完实现了接口
    class_implements();一个参数是类名，以数组形式返回这个类事项的所有接口名
    调用方法：使用字符串动态调用方法，$obj->$method();这里$method是方法名的字符串
    也可以使用call_user_func();来调用，但是如果要调用的是函数，则只有有一个字符串参数，如果要调用的是类方法，则两个参数，第一个参数是对象，第二个是方法名
     call_user_func_array();更好用，把要调用的方法的参数作为数组来进行传递，参数的 数组作为另外的数组来进行传递，对象和方法是一个数组
     当访问一个未定义的方法时，__call()；被调用
     public function __call($method,$ages){
        if(method_exists($obj,$method)){
            call_user_func_array(array($obj,$method),$args);
        }
     }
10、反射API
    是由一系列可以分析属性，方法，类的内置类组成。在某些方面和 学过 的对象函数类似。但是更加灵活，可以提供更多信息，反射API可以与 PHP最新特性一起工作，
    如访问控制， 接口，抽象类
     API入门
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
