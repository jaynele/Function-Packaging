1、通过对象来访问 属性和方法， 也可以通过类来访问属性和方法，这样的属性和方法是静态的，必须用static来声明
   静态方法是 以类为作用域的函数，静态方法只能访问 静态属性，不能访问普通属性，因为普通属性是属于类的实例 也就是对象的
   访问静态方法和静态实例如下：
   class StaticExample{
      static public $aNum = 0;
      static public function sayHello(){
        var_dump('hello');
      }
   }
   var_dump(StaticExample::$aNum);
   StaticExample::sayHello();
   现在我们用::来访问类而不是对象，子类中我们用::来访问基类，本类中我们用self关键字来访问静态方法，静态属性
   parent指向基类，self指向当前类，this指向当前对象， 因此外部可以直接用类名来访问方法和属性
   类外部可以使用类名，类内部可以使用self,如下：
   class StaticExample{
      static public $aNum = 0;
      static public function sayHello(){
          self::$aNum = 33;
          var_dump('hello'.self::$aNum."\n");
      }
   }
   我们不能在对象中使用静态方法，静态方法中不能使用伪变量this,静态方法和属性被 称为类方法和类属性
   使用静态方法可以不用为了获取一个简单的功能而实例化一个对象
   构造ShopProduct类的一个静态方法，自动来实例化ShopProduct这个对象， ID参数，和PDO，是返回数据库的一行记录
   class ShopProduct{
      private $title;
      private $productMainName;
      private $productFirstName;
      protected $price;
      private $id = 0;
      public function __construct($title,$mainName,$firstName,$price){
          $this->title = $title;
          $this->productMainName = $mainName;
          $this->productFirstName = $firstName;
          $this->price = $price;
      }
      public function getProduct(){
          return $this->productMainName.'&nbsp;'.$this->productFirstName;
      }
      public function getSummaryLine(){
          $base = '('.$this->title.':)'.$this->productMainName;
          $base .= $this->productFirstName;
          return $base;
      }
      public function setID($id){
          $this->id = $id;
      }
      static public function getInstance($id,PDO $objPDO){
          $stmt = $objPDO->prepare('SELECT * FROM products WHERE id = '.$id);
          $res = $stmt->execute(array($id));
          $row = $stmt->fetch();
          if(empty($row)){
              return null;
          }
          if($row['type'] == 'book'){
              $objproduct = new BookProduct($row['title'],$row['mainname'],$row['firstname'],$row['price'],$row['numpages']);
          }elseif($row['type'] == 'cd'){
              $objproduct = new CDProduct($row['title'],$row['mainname'],$row['firstname'],$row['price'],$row['numpages']);
          }else{
              $objproduct = new ShopProduct($row['title'],$row['mainname'],$row['firstname'],$row['price']);
          }
          $objproduct->setID = $id;
          $objproduct->discount = $row['discount'];
          return $objproduct;
      }
   }
   这里该有错误处理，pdo不一定就连对了正确的数据库，应该把pdo 封 装成类
2、 有些属性是公共的、可访问的，但是客户端不可以 对其进行修改，它跟 其他的属性不一样，const,不用$, 要大写
    常量属性只能有基本类型的值，不能将一个对象赋给常量，只能通过类而不能通过对象来进行访问常量，引用常量时不需要$符号
    给声明过的常量赋值， 一 般可能会引起解析错误，所有实例都可以访问，并且值不能改变，通常这个时候比较适合用常量
3、抽象类不能被 直接的实例化，它提供了子类需要的方法，子类通过继承完善它的方法，才可以实例化
   可以用abstract 关键字来定义一个抽象类，抽象类不能实例化成对象，会有报错，一个抽象类至少包含一个抽象方法，例：
   abstract class ShopProductWriter{
      private $product = array();
      public function addProduct(ShopProduct $objShopProduct){
          $this->product[] = $objShopProduct;
      }
      abstract public function writer();
   }
   抽象方法以分号结束，不能以方法体结束
   创建抽象方法后，要确保所有子类都实现了抽象方法，实现的细节可以先不确定，或者把子类 的方式设置为抽象，子类的实现方法不能比抽象原来的
   抽象方法  访问限制更严格，新的实现方法的参数应该跟原来抽象方法保持一致
4、抽象类提供了具体的实现标准，接口是纯粹的模板，接口只能定义功能，不包含实现的内容
   接口可以用interface关键字来定义，可以包含属性和方法，但是方法体为空，如下：
   interface Changeable{
      public function getPrice();
   }
   接口和类非常相似，任何实现接口的类必须实现接口的 所有方法，否则该类必须声明为abstract
   可以使用implements实现一个接口，下面我们让ShopProduct类实现上面的接口
   class ShopProduct implements Changeable{
       public function getPrice(){
         return ($this->price - $this->discount);
       }
   }
   ShopProduct类有这个方法，实现接口这个方法有用，因为实现接口的类接收了继承的类还有接口的类型
   所以你只要知道方法的参数 的对象的类型，你就可以知道这个可以做什么，接收的参数对象不但有自己的功能，还有继承的基类，还有实现的接口的功能
   任何类都可以实现接口，一个类还可以实现多个接口，  接口可以将不相关的类型联系起来，
   如果传递 一个接口作为参数，那么就只关注是否是含有接口的这个方法，
    类可以一次继承父类同时实现多个接口，
    class Consultancy extends TimeService implements Bookable,Chargeable{
         //
    }
    实现了不止一个接口， 多个接口用,隔开
    PHP只支持继承一个父类，所以extends只能在一个类名之前
4、延迟静态绑定，static关键字
   回顾静态方法， 可以用作工厂方法，生成一个类的实例，工厂方法是生成包含类的实例的方法， 作为一个懒惰的程序员，看到下面的 代码可能会恼火
    abstract class A{
    }
    class User extends A{
      static public function create(){
           return new User();
      }
    }
    class Document extends A{
      static public function create(){
          return new Document();
      }
    }
    25个非常重要的类库
    每个子类都重复写，麻烦 我们可以将子类重复的部分放到超类中
    abstract class A{
      static public function create(){
         return new self();
      }
    }
    class User extends A{
    }
    class Document extends A{
    }
    Document::create();
    运行上面的代码，会报错；
    实际上，self是静态绑定，被解析为定义create方法的超类，而不是调用的Document类
    而static则是指定的调用的类，所以这点儿的差别可以解决这个问题
    abstract class DomainObj{
      static public function create(){
         return new static();
      }
    }
    class User extends DomainObj{
    }
    class Document extends DomainObj{
    }
    var_dump(Document::create());
    所以static关键字不仅可以实例化，还可以作为上下文调用的关键字，如下：
    abstract class DomainObj{
      private $group;
      public function __construct(){
         $this->group = static::getGroup();
      }
      static public function create(){
         return new static();
      }
      static public function getGroup(){
         return 'default';
      }
    }
    class User extends DomainObj{
      
    }
    class Document extends DomainObj{
      static public function getGroup(){
         return 'hello';
      }
    }
    class Shipping extends Document{
      
    }
    var_dump(User::create());
    var_dump(Shipping::create());
5、错误处理，文件放错位置，数据库服务器未初始化，url有变动，xml文件损坏，权限设置得不对，超过了磁盘空间限制，这些问题 经查发生，一个简单的类
   可能充满了错误处理代码，大量的错误处理代码并不好，麻烦
   遇到错误停止代码，这种方法简单，但是过于激烈， 因为一个简单的类，就停止整个程序，有些方法可以检测到错误，但是并不知道怎么处理错误
   不在类中处理错误，直接返回错误标志，错误标志可以是布尔值，或是整数，也可以设置错误字符串，让客户端获取更多的错误信息，
   一、异常是php自带的Exception类实例化得来的特殊对象，这个特殊对象用来存储和报告错误信息
       Exception类的构造方法接受两个可选参数，消息字符串和错误代码，这个类提供了有用的方法来分析错误条件，这些方法：
       getMessage();   获得传递给构造方法的消息字符串
       getCode();      获得传递给构造方法的错误代码
       getFile();      获得产生异常的文件
       getLine();      获得生成异常的行号
       getPrevious    获得一个嵌套的异常对象
       getTrace();     获得一个多维数组，这个数组追踪导致异常的方法调用，包含方法，类，文件，参数数据
       getTraceAsString();   获得getTrace();返回的数据的字符串版本
       __toString();    返回一个描述异常细节的字符串
      Exception类返回的错误通知如 getTrace()；特别有用
      1、抛出异常 
      
      使用关键字throw,Exception类的对象来进行抛出，如下：
      class file{
         private $file;
         public function __construct($file){
             if(!file_exists($file)){
               throw new Exception("file '$file' does not exist");
             }
         }
      }
      检测错误， 让其他更合适的代码来响应检测到的错误，所以是抛出错误，处理错误
      如果调用可能会抛出异常的方法，那么可以把语句放到try子句中，try子句 至少跟一个catch子句才能处理错误，
      当抛出异常时候，catch子句会被调用，自动将 Exception对象作为参数传入，抛出异常时，会停止执行类方法，控制权到了catch () 子句中
      2、异常的子类 化
         理由：1、 扩展异常类的功能    2、定义新的异常类型
         实际定义多个catch，也只用一个try子句，调用哪个catch取决于抛出异常的类型提示，把通用的异常类型放到最后Exception 放到最后
         如果把Exception 放到前面，那么后面的就不会被调用
         也有可能抛出了包含旧异常的新异常
         如果异常没有被捕获时， 那么会被再次抛出，直到异常被捕获，或不再出现，如果到最后也没有被捕获，那么会发生致命的错误，抛出异常要强制对其处理
6、继承为类层次内部带来了灵活性，可能调用同样的方法，结果却不一样，但是可能需要类和方法不发生变化 ， 用到final关键字
      final关键字可以终止类的继承，final类不能有子类，final方法不能被覆写，例如：
      final class A{
      }
      class B extends A{
      }
      var_dump(new B());
      这个时候会报错
      final方法的final关键字要放到public 、static等 修饰词之前，例如：
      class A{
         final public function B(){
            return 'default';   
         }
      }
      class A1 extends A{
         public function B(){
            return 'hello';
         }
      }
      var_dump(new A1()->B());
      这样就会报错
      慎重使用final
7、php内置的3个拦截器，类似于__construct();
    __get($property);    访问未定义的属性时被调用
    __set($property,$value);   给未定义的属性赋值时被调用
    __isset($property);    对未定义的属性调用isset()时被调用 
    __unset($property);    对未定义的属性调用unset()时被调用
    __call($method,$arg_array);   调用未定义的方法时被调用
    注：__get(),__set(), 处理类中未声明的属性
    当访问未声明的参数时，__get()被调用，带一个  包含访问的属性名的字符串参数,好像带有该值的目标属性存在一样，如下：
    method_exists('对象'，'方法名');
    （1）__get();方法
    class Person{
      public function __get($property){
         $method = 'get'.$property;         
         if(method_exists($this,$method)){
            return $this->$method();
         }
      }
      public function __getName(){
         return 'Bob';
      }
      public function __getAge(){
         return 44;
      }
    }
    $objPerson = new Person();
    var_dump($objPerson->name);
    访问未定义的属性，__get()这个方法被调用
    __isset()方法与__get()方法类似，一个未定义的属性调用isset时，__isset()方法被调用，如下：
    类 实例化为对象时，调用 未定义的属性，并判断属性是否存在，这个时候会调用__isset()方法
    （2）__isset()方法
    class Person{
      public function __get($property){
         $method = 'get'.$property;
         if(method_exists($this,$method)){
            return $this->$method();
         }
      }
      public function __isset($property){
         $method = 'get'.$property;
         return method_exists($this,$method);
      }
      public function getName(){
         return 'Bob';
      }
      public function getAge(){
         return 44;
      }
    }
    $objPerson = new Person();
    var_dump($objPerson->name);
    if(isset($objPerson->age)){
      return 'hello';
    }
    __isset(),实例化后 可以使用。
    （3）__set(),
    class Person{
      public $_name;
      public $_age;
      public function __set($property,$value){
         $method = 'set'.$property;
         if(method_exists($method)){
            return $this->$method($value);
         }
      }
      public function setName($name){
         $this->_name = $name;
         if(!is_null($name)){
            $this->_name = strtoupper($this->_name);
         }
      }
      public function setAge($age){
         $this->_age = $age;
      }
    }
    $objPerson = new Person();
    $objPerson->name = 'name11';
    （4）__unset();
       class Person{
         private $_name;
         public function __unset($property){
            $method = 'set'.$property;
            if(method_exists($this,$property)){
               return $this->$method(null);
            }
         }
         public function setName($name){
            $this->_name = $name;
            if(!is_null($name)){
               $this->_name = strtoupper($this->_name);
            }
         }
       }
       $objPerson = new Person();
       if(unset($objPerson->Name)){
         var_dump('设置成功');
       }
    （5）__call();
        这个方法是这几个中最有用的，也最常用，有两个参数，方法名，和传入这个方法的参数，这些参数以数组的形式放进去
        这个方法对实现委托也很有 用，委托是一个对象到另外一个对象，被委托的对象替原来的对象处理请求
        class PersonWriter{
          public function WriterName(Person $P){
            return $p->getName();
          }
        }
        class Person{
            private $writer;
            public function __construct(PersonWriter $objWriter){
               $this->writer = $objWriter;
            }
            public function __call($WriterName,$args){
               if(method_exists($this->writer,$WriterName)){
                  return $this->writer->$WriterName($this);
               }
            }
            public function getName(){
               return 'Bob';
            }
            public function getAge(){
               return 44;
            }
        }
         $objPerson = new Person(new PersonWriter);
         var_dump($objPerson->WriterName());
         通常都是实例化对象后调用，但是一定要 注 意调用的属性名，或者方法名
      （6）自动委托可以 节省很多时间，但是代码也会变得不太清晰， 不易理解， 不易理清头绪，
         注：拦截器很有用，但是用的时候一定 要附上文档
         __destruct()方法，这个方法对工作进行必要的清理工作
         不论对象何时从内存中删除，都会调用__destruct();当对象用了unset()对其进行销毁了，那么也会调用这个__destruct()方法，如下：
         class Person{
            private $name;
            private $age;
            private $id;
            public function __construct($name,$age){
               $this->name = $name;
               $this->age = $age;
            }
            public function setId($id){
               $this->id = $id;
            }
            public function __destruct(){
                  var_dump('id有值');
                 if(!empty($this->id)){
                     var_dump(''最后已经清理);
                 }
            }
         }
         $objPerson = new Person('name11',''age11);
         $objPerson->setId(22);
         unset($objPerson);
         __call();__destruct();这些魔法 方法不要轻易相信
         有个类用destruct,把类的数据写入了数据库，但是一个新手，实例化了一组新对象，并把给经理起的外号与 年龄作为参数传给了构造方法，
         多次运行脚本，然后数据库写入了乱七八糟的数据，被领导请去喝茶。这种现象就说明魔法方法不要轻易乱用
      （7）复制对象
          class copyMe{}
          $first = new copyMe();
          $second = $first;
          php4中，这两个对象是不同 的对象
          php5之后，这两个对象指向同一个对象
          在4中，这种现象会有很多bug，在变量复制，调用方法，返回对象时对进行 对象复制，会告诉你是否都是对象，但是不会告诉你 是否指向同一个对象
          所以， 在php中，对象赋值和对象传递都是通过引用传递的，也就说$first 和$second  指向的是同一个对象 ，这正是我们希望的，但是 我们
          也需要一个副本，而就不是引用了
          我们使用clone关键字来赋值一个对象，形成一个对象的副本，例如：
          class copyMe{}
          $first = new copyMe();
          $second = clone $first;
          这个时候$first 和 $second 指向的就不是一个对象，但是这种复制是采用‘值复制’的方法；如果两个对象的id 属性对应数据库中的同一条数据
          就是不妥的。
          所以对象采用clone方法时，我们是可以控制复制什么的，我们可以通过__clone()方法， 双下划线开头的都是php的内置 方法
          当我们对一个对象使用clone方法时，__clone()方法就会被自动调用
          注意： __clone()是在复制 得来的对象上进行的，而不是在原始的对象上运行的，如下：
           class Person{
               private $name;
               private $age;
               private $id;
               public function __construct($name,$age){
                  $this->name = $name;
                  $this->age = $age;
               }
               public function setId($id){
                  $this->id = $id;
               }
               public function __clone(){
                  $this->id = 0;
               }
           }
           $objPerson = new Person('name11','age11');
           $objPerson->setId(22);
           $objPerson1 = clone($objPerson);
           var_dump($objPerson.'<br />');
           var_dump($objPerson1);
          这样对象的复制就是有限制的，对复制 后的对象进行部分再次赋值
          如果 person对象有一个对象类型的属性Account，这个Account对象有个$balance属性。
          复制的时候， 这个属性可以 复制，但是我们不希望原来的Person对象和复制的Person引用同一个账户
          class Account{
            public $balance;
            public function __construct($balance){
               $this->balance = $balance;
            }
          }
          class Person{
            private $name;
            private $age;
            private $id;
            public $Account;
            public function __construct($name,$age,Account $Account){
               $this->name = $name;
               $this->age = $age;
               $this->Account = $Account;
            }
            public function setId($id){
               $this->id = $id;
            }
            public function __clone(){
               $this->id = 0;
            }
          }
          $objPerson = new Person('name222','age222',new Account(200));
          $objPerson->setId(222);
          $objPerson1 = clone $objPerson;
          $objPerson->Account->balance += 10;
          var_dump($objPerson->Account->balance);
          结果是两个对象的账户引用的 是同一个，然而我们并不想这样， 原始对象与复制对象引用的都是同一个Account 对象，所以账户都加钱了
          我们不希望 对象属性被复制后共享
          我们可以复制指向的对象
          class Person{
            private $name;
            private $age;
            private $id;
            public $Account;
            public function __construct($name,$age,Account $Account){
               $this->name = $name;
               $this->age = $age;
               $this->Account = $Account;
            }
            public function setId($id){
               $this->id = $id;
            }
            public function __clone(){
               $this->id = 0;
               $this->Account = clone $this->Account;
            }
          }
          $objPerson = new Person('name11','age11',new Account(200));
          $objPerson->setId(11);
          $objPerson1 = clone $objPerson;
          $objPerson->Account->Blance += 10;
          var_dump($objPerson);
          echo '<br />';
          var_dump($objPerson1);
           复制之后是两个对象，给一个对象钱，另一个对象的钱不能增加
        (8)定义对象的字符串值
          如果你打印一个对象，就会把一个对象解析成字符串 值来输出
          class StringThing{
          }
          $objStr = new StringThing();
          var_dump($objStr);
          当把$objStr传给一个echo 或print时候，就会有报错的。
          通过实现__toString()方法，可以限制字符串输出的格式，__toString()方法应当返回一个字符串值，            
          当把对象传给echo 或print时候，会自动调用__toString()方法，并用这个方法的返回值 替代默认返回的值，如下：
          class Person{
            public function getName(){
               return 'Bob';
            }
            public function getAge(){
               return 44;
            }
            public function __toString(){
               $desc = $this->getName();
               $desc .= '(age:'.$this->getAge().')';
               return $desc;
            }
          }
          $objPerson = new Person();
          echo $objPerson;
          这里 echo 和print的应该是一个字符串的，但是这里要 echo print一个对象，  所 以这个时候会调用__toString()方法
          对于错误和日志，这个方法很有用，也可用来专门设计 传递信息的类，例如：Exception类可以把 异常信息的总结信息写到__toString()方法中
      （9）虽然匿名函数不是严格意义上的面向对象的特性，但是还是很有用的，因为可能在使用回调的面向对象的应用上使用到，匿名函数----回调
          运行各种回调， 例如：
          class Product{
            private $name;
            private $price;
            public function __construct($name,$price){
               $this->name = $name;
               $this->price = $price;
            }
            public function getName(){
               return $this->name;
            }
            public function getPrice(){
               return $this->price;
            }
          }
         class PrincessSale{
            private $callbacks;
            public function registerCallback($callback){
               if(!is_callable($callback)){
                  throw new Exception('参数  can not callable');
               }
               $this->callbacks[] = $callback;
            }
            public function save($objproduct){
               echo $objProduct->getName();
               foreach($this->callbacks as $callback){
                  call_user_func($callback,$objproduct);
               }
            }
         }
         利用回调可以在运行时将与代码核心组件没有关系的功能插入到组件中，赋予其他人，在你不知道的上下文中下扩展你的代码
         $logger = create_function('$objProduct','echo 匿名函数回调'.$objProduct->getName());
         $objPrincess = new PrincessSale();
         $objPrincess->registerCallback($logger);
         $objPrincess->save(new Product('name11',44));
         $objPrincess->save(new Product('name22',88));
         create_function();这个方法很难看，要把执行体放到一个字符串中，如果 回调 变得庞大，那么 这样就不合适了，
         一种更优雅的创建匿名函数的方法，
         $logger = function($product){
            echo $product->getName();
         };
         因为这个一个内联语句，所以末尾的分号不可以省略，回调一定要是匿名的，可以使用函数作为回调
         也可以用方法来返回 一个匿名函数
         综述：create_function()、写个内联语句、通过 方法返回一个匿名函数。这三个方法都是有用的
    （10）通过方法返回一个匿名函数，这样的结构还可以做很多事情，比如利用闭包  
         use 可以让匿名函数追踪来自父作用域的变量
         class Tlerzer{
            static public function WarnAcount($arm){
               $count = 0;
               return function($objProduct) use($arm,&$count){
                  $count += $objProduct->price;
                  if($count >= $arm){
                     echo '价格超过目标金额了';
                  }
               }
            }
         }
         可以用匿名函数的引用而不是值，$count前面加了&符号
       总结：匿名函数，回调，闭包要再次多看看

         
         
         
    
    
    
    
    
    
    
    
    
    
    
    
    
      
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
